{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mac/Repositories/Defi-staking-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Repositories/Defi-staking-app/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context2.sent;\n                // Load Tether Contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context2.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context2.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context2.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error! Tether contract not deployed - No detected Network!');\n\n              case 20:\n                // Load Reward Contract\n                rwdData = Rwd.networks[networkId];\n\n                if (!rwdData) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context2.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context2.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                _context2.next = 31;\n                break;\n\n              case 30:\n                window.alert('Error! Reward Token contract not deployed - No detected Network!');\n\n              case 31:\n                // Load DecentralBank Contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context2.next = 37;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 37:\n                stakingBalance = _context2.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context2.next = 42;\n                break;\n\n              case 41:\n                window.alert('Error! Decentral Bank contract not deployed - No detected Network!');\n\n              case 42:\n                this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No Wallet Detected, Check out Metamask or other wallets!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        tetherBalance: this.state.tetherBalance,\n        rwdBalance: this.state.rwdBalance,\n        stakingBalance: this.state.stakingBalance,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Repositories/Defi-staking-app/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","Rwd","DecentralBank","Main","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","alert","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","ethereum","enable","currentProvider","props","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'\nimport Rwd from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\nimport Main from './Main'\n\n\nclass App extends Component {\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        console.log(accounts)\n        this.setState({account: accounts[0]})\n        const networkId = await web3.eth.net.getId()\n\n        \n        // Load Tether Contract\n        const tetherData = Tether.networks[networkId]\n        if(tetherData) {\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n            this.setState({tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString()})\n        } else {\n            window.alert('Error! Tether contract not deployed - No detected Network!')\n        }\n\n        // Load Reward Contract\n        const rwdData = Rwd.networks[networkId]\n        if(rwdData) {\n            const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address)\n            this.setState({rwd})\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString()})\n        } else {\n            window.alert('Error! Reward Token contract not deployed - No detected Network!')\n        }\n\n        // Load DecentralBank Contract\n        const decentralBankData = DecentralBank.networks[networkId]\n        if(decentralBankData) {\n             const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n             this.setState({decentralBank})\n             let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n             this.setState({stakingBalance: stakingBalance.toString() })\n        } else {\n             window.alert('Error! Decentral Bank contract not deployed - No detected Network!')\n        }\n            this.setState({loading: false})\n    }\n\n\n    async loadWeb3() {\n        if(window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if(window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider)\n            } else {\n                window.alert('No Wallet Detected, Check out Metamask or other wallets!')\n            }\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance:'0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar account={this.state.account}/>\n                    <div className='container-fluid mt-5'>\n                        <div className='row'>\n                            <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight:'100vm'}}>\n                                <div>\n                                    <Main\n                                    tetherBalance={this.state.tetherBalance}\n                                    rwdBalance={this.state.rwdBalance}\n                                    stakingBalance={this.state.stakingBalance}/>\n                                </div>\n                            </main>\n                        </div>\n                    </div>\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}